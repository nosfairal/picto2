! function(e, t) {
  "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define("spectrogram", [], t) : "object" == typeof exports ? exports.spectrogram = t() : (e.WaveSurfer = e.WaveSurfer || {}, e.WaveSurfer.spectrogram = t())
}(window, function() {
  return function(e) {
	var t = {};

	function r(a) {
  	if (t[a]) return t[a].exports;
  	var i = t[a] = {
    	i: a,
    	l: !1,
    	exports: {}
  	};
  	return e[a].call(i.exports, i, i.exports, r), i.l = !0, i.exports
	}
	return r.m = e, r.c = t, r.d = function(e, t, a) {
  	r.o(e, t) || Object.defineProperty(e, t, {
    	enumerable: !0,
    	get: a
  	})
	}, r.r = function(e) {
  	"undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
    	value: "Module"
  	}), Object.defineProperty(e, "__esModule", {
    	value: !0
  	})
	}, r.t = function(e, t) {
  	if (1 & t && (e = r(e)), 8 & t) return e;
  	if (4 & t && "object" == typeof e && e && e.__esModule) return e;
  	var a = Object.create(null);
  	if (r.r(a), Object.defineProperty(a, "default", {
      	enumerable: !0,
      	value: e
    	}), 2 & t && "string" != typeof e)
    	for (var i in e) r.d(a, i, function(t) {
      	return e[t]
    	}.bind(null, i));
  	return a
	}, r.n = function(e) {
  	var t = e && e.__esModule ? function() {
    	return e.default
  	} : function() {
    	return e
  	};
  	return r.d(t, "a", t), t
	}, r.o = function(e, t) {
  	return Object.prototype.hasOwnProperty.call(e, t)
	}, r.p = "localhost:8080/dist/plugin/", r(r.s = 3)
  }({
	3: function(e, t, r) {
  	"use strict";

  	function a(e, t) {
    	for (var r = 0; r < t.length; r++) {
      	var a = t[r];
      	a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(e, a.key, a)
    	}
  	}

  	function i(e, t, r) {
    	return t && a(e.prototype, t), r && a(e, r), e
  	}
  	Object.defineProperty(t, "__esModule", {
    	value: !0
  	}), t.default = void 0;
  	var n = function(e, t, r, a) {
      	switch (this.bufferSize = e, this.sampleRate = t, this.bandwidth = 2 / e * (t / 2), this.sinTable = new Float32Array(e), this.cosTable = new Float32Array(e), this.windowValues = new Float32Array(e), this.reverseTable = new Uint32Array(e), this.peakBand = 0, this.peak = 0, r) {
        	case "bartlett":
          	for (i = 0; i < e; i++) this.windowValues[i] = 2 / (e - 1) * ((e - 1) / 2 - Math.abs(i - (e - 1) / 2));
          	break;
        	case "bartlettHann":
          	for (i = 0; i < e; i++) this.windowValues[i] = .62 - .48 * Math.abs(i / (e - 1) - .5) - .38 * Math.cos(2 * Math.PI * i / (e - 1));
          	break;
        	case "blackman":
          	for (a = a || .16, i = 0; i < e; i++) this.windowValues[i] = (1 - a) / 2 - .5 * Math.cos(2 * Math.PI * i / (e - 1)) + a / 2 * Math.cos(4 * Math.PI * i / (e - 1));
          	break;
        	case "cosine":
          	for (i = 0; i < e; i++) this.windowValues[i] = Math.cos(Math.PI * i / (e - 1) - Math.PI / 2);
          	break;
        	case "gauss":
          	for (a = a || .25, i = 0; i < e; i++) this.windowValues[i] = Math.pow(Math.E, -.5 * Math.pow((i - (e - 1) / 2) / (a * (e - 1) / 2), 2));
          	break;
        	case "hamming":
          	for (i = 0; i < e; i++) this.windowValues[i] = (.54 - .46) * Math.cos(2 * Math.PI * i / (e - 1));
          	break;
        	case "hann":
        	case void 0:
          	for (i = 0; i < e; i++) this.windowValues[i] = .5 * (1 - Math.cos(2 * Math.PI * i / (e - 1)));
          	break;
        	case "lanczoz":
          	for (i = 0; i < e; i++) this.windowValues[i] = Math.sin(Math.PI * (2 * i / (e - 1) - 1)) / (Math.PI * (2 * i / (e - 1) - 1));
          	break;
        	case "rectangular":
          	for (i = 0; i < e; i++) this.windowValues[i] = 1;
          	break;
        	case "triangular":
          	for (i = 0; i < e; i++) this.windowValues[i] = 2 / e * (e / 2 - Math.abs(i - (e - 1) / 2));
          	break;
        	default:
          	throw Error("No such window function '" + r + "'")
      	}
      	for (var i, n = 1, s = e >> 1; n < e;) {
        	for (i = 0; i < n; i++) this.reverseTable[i + n] = this.reverseTable[i] + s;
        	n <<= 1, s >>= 1
      	}
      	for (i = 0; i < e; i++) this.sinTable[i] = Math.sin(-Math.PI / i), this.cosTable[i] = Math.cos(-Math.PI / i);
      	this.calculateSpectrum = function(e) {
        	var t, r, a, i = this.bufferSize,
          	n = this.cosTable,
          	s = this.sinTable,
          	o = this.reverseTable,
          	l = new Float32Array(i),
          	h = new Float32Array(i),
          	f = 2 / this.bufferSize,
          	u = Math.sqrt,
          	c = new Float32Array(i / 2),
          	p = Math.floor(Math.log(i) / Math.LN2);
        	if (Math.pow(2, p) !== i) throw "Invalid buffer size, must be a power of 2.";
        	if (i !== e.length) throw "Supplied buffer is not the same size as defined FFT. FFT Size: " + i + " Buffer Size: " + e.length;
        	for (var d, v, w, b, y, m, g, M, k = 1, S = 0; S < i; S++) l[S] = e[o[S]] * this.windowValues[o[S]], h[S] = 0;
        	for (; k < i;) {
          	d = n[k], v = s[k], w = 1, b = 0;
          	for (var x = 0; x < k; x++) {
            	for (S = x; S < i;) m = w * l[y = S + k] - b * h[y], g = w * h[y] + b * l[y], l[y] = l[S] - m, h[y] = h[S] - g, l[S] += m, h[S] += g, S += k << 1;
            	w = (M = w) * d - b * v, b = M * v + b * d
          	}
          	k <<= 1
        	}
        	S = 0;
        	for (var T = i / 2; S < T; S++)(a = f * u((t = l[S]) * t + (r = h[S]) * r)) > this.peak && (this.peakBand = S, this.peak = a), c[S] = a;
        	return c
      	}
    	},
    	s = function() {
      	function e(t, r) {
        	var a = this;
        	! function(e, t) {
          	if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
        	}(this, e), this.params = t, this.wavesurfer = r, this.util = r.util, this.frequenciesDataUrl = t.frequenciesDataUrl, this._onScroll = function(e) {
          	a.updateScroll(e)
        	}, this._onRender = function() {
          	a.render()
        	}, this._onWrapperClick = function(e) {
          	a._wrapperClickHandler(e)
        	}, this._onReady = function() {
          	var e = a.drawer = r.drawer;
          	if (a.container = "string" == typeof t.container ? document.querySelector(t.container) : t.container, !a.container) throw Error("No container for WaveSurfer spectrogram");
          	a.width = e.width, a.pixelRatio = a.params.pixelRatio || r.params.pixelRatio, a.fftSamples = a.params.fftSamples || r.params.fftSamples || 512, a.height = a.fftSamples / 2, a.noverlap = t.noverlap, a.windowFunc = t.windowFunc, a.alpha = t.alpha, a.createWrapper(), a.createCanvas(), a.render(), e.wrapper.addEventListener("scroll", a._onScroll), r.on("redraw", a._onRender)
        	}
      	}
      	return i(e, null, [{
        	key: "create",
        	value: function(t) {
          	return {
            	name: "spectrogram",
            	deferInit: !(!t || !t.deferInit) && t.deferInit,
            	params: t,
            	staticProps: {
              	FFT: n
            	},
            	instance: e
          	}
        	}
      	}]), i(e, [{
        	key: "init",
        	value: function() {
          	this.wavesurfer.isReady && this._onReady(), this.wavesurfer.on("ready", this._onReady)
        	}
      	}, {
        	key: "destroy",
        	value: function() {
          	this.unAll(), this.wavesurfer.un("ready", this._onReady), this.wavesurfer.un("redraw", this._onRender), this.drawer.wrapper.removeEventListener("scroll", this._onScroll), this.wavesurfer = null, this.util = null, this.params = null, this.wrapper && (this.wrapper.removeEventListener("click", this._onWrapperClick), this.wrapper.parentNode.removeChild(this.wrapper), this.wrapper = null)
        	}
      	}, {
        	key: "createWrapper",
        	value: function() {
          	var e = this.container.querySelector("spectrogram");
          	e && this.container.removeChild(e);
          	var t = this.wavesurfer.params;
          	if (this.wrapper = document.createElement("spectrogram"), this.params.labels) {
            	var r = this.labelsEl = document.createElement("canvas");
            	r.classList.add("spec-labels"), this.drawer.style(r, {
              	left: 0,
              	position: "absolute",
              	zIndex: 9,
              	height: "".concat(this.height / this.pixelRatio, "px"),
              	// height: "".concat(this.height / this.pixelRatio, "px"), (commentaire) gere la hauteur de la frise des fr√©quences (labels)
              	width: "".concat(55 / this.pixelRatio, "px")
            	}), this.wrapper.appendChild(r), this.loadLabels("rgba(68,68,68,0.5)","12px","10px","","#fff","#f7f7f7", "center", "#specLabels")
          	}
          	this.drawer.style(this.wrapper, {
            	display: "block",
            	position: "relative",
            	userSelect: "none",
            	webkitUserSelect: "none",
            	height: "".concat(this.height / this.pixelRatio, "px")
          	}), (t.fillParent || t.scrollParent) && this.drawer.style(this.wrapper, {
            	width: "100%",
            	overflowX: "hidden",
            	overflowY: "hidden"
          	}), this.container.appendChild(this.wrapper), this.wrapper.addEventListener("click", this._onWrapperClick)
        	}
      	}, {
        	key: "_wrapperClickHandler",
        	value: function(e) {
          	e.preventDefault();
          	var t = "offsetX" in e ? e.offsetX : e.layerX;
          	this.fireEvent("click", t / this.scrollWidth || 0)
        	}
      	}, {
        	key: "createCanvas",
        	value: function() {
          	var e = this.canvas = this.wrapper.appendChild(document.createElement("canvas"));
          	this.spectrCc = e.getContext("2d"), this.util.style(e, {
            	position: "absolute",
            	zIndex: 4
          	})
        	}
      	}, {
        	key: "render",
        	value: function() {
          	this.updateCanvasStyle(), this.frequenciesDataUrl ? this.loadFrequenciesData(this.frequenciesDataUrl) : this.getFrequencies(this.drawSpectrogram)
        	}
      	}, {
        	key: "updateCanvasStyle",
        	value: function() {
          	var e = Math.round(this.width / this.pixelRatio) + "px";
          	this.canvas.width = this.width, this.canvas.height = this.height, this.canvas.style.width = e
        	}
      	}, {
        	key: "drawSpectrogram",
        	value: function(e, t) {
          	t.spectrCc, t.wavesurfer.backend.getDuration();
          	var r, a, i = t.height,
            	n = t.resample(e),
            	s = t.buffer ? 4.5 / t.buffer.numberOfChannels : 1;
            	//s = t.buffer ? 2 / t.buffer.numberOfChannels : 1; cette valeur modifie la taille du spectre (commentaire)

          	for (r = 0; r < n.length; r++)
            	for (a = 0; a < n[r].length; a++) {
              	var  jet = [[0,0,128],[0,0,132],[0,0,136],[0,0,141],[0,0,145],[0,0,149],[0,0,155],[0,0,159],[0,0,164],[0,0,168],[0,0,173],[0,0,177],[0,0,182],[0,0,187],[0,0,191],[0,0,195],[0,0,200],[0,0,204],[0,0,209],[0,0,214],[0,0,219],[0,0,223],[0,0,227],[0,0,232],[0,0,237],[0,0,241],[0,0,245],[0,0,250],[0,0,254],[0,0,255],[0,0,255],[0,0,255],[0,1,255],[0,5,255],[0,8,255],[0,12,255],[0,17,255],[0,20,255],[0,24,255],[0,28,255],[0,32,255],[0,36,255],[0,41,255],[0,45,255],[0,48,255],[0,53,255],[0,57,255],[0,60,255],[0,65,255],[0,69,255],[0,72,255],[0,77,255],[0,80,255],[0,84,255],[0,88,255],[0,93,255],[0,96,255],[0,100,255],[0,105,255],[0,108,255],[0,112,255],[0,117,255],[0,121,255],[0,124,255],[0,129,255],[0,133,255],[0,136,255],[0,141,255],[0,145,255],[0,148,255],[0,152,255],[0,157,255],[0,160,255],[0,164,255],[0,169,255],[0,172,255],[0,176,255],[0,181,255],[0,185,255],[0,188,255],[0,193,255],[0,197,255],[0,200,255],[0,205,255],[0,209,255],[0,212,255],[0,216,255],[0,221,254],[0,224,251],[0,228,248],[2,233,244],[6,236,241],[9,240,238],[12,245,235],[15,249,232],[19,252,228],[22,255,225],[25,255,222],[28,255,219],[31,255,215],[35,255,212],[38,255,209],[41,255,206],[44,255,202],[48,255,199],[51,255,196],[54,255,193],[57,255,189],[60,255,186],[64,255,183],[67,255,180],[70,255,177],[73,255,173],[77,255,170],[80,255,167],[83,255,164],[86,255,160],[90,255,157],[93,255,154],[96,255,151],[99,255,148],[103,255,144],[106,255,141],[109,255,138],[112,255,135],[115,255,131],[119,255,128],[122,255,125],[125,255,122],[128,255,119],[131,255,115],[135,255,112],[138,255,109],[141,255,106],[144,255,103],[148,255,99],[151,255,96],[154,255,93],[157,255,90],[160,255,86],[164,255,83],[167,255,80],[170,255,77],[173,255,73],[177,255,70],[180,255,67],[183,255,64],[186,255,60],[189,255,57],[193,255,54],[196,255,51],[199,255,48],[202,255,44],[206,255,41],[209,255,38],[212,255,35],[215,255,31],[219,255,28],[222,255,25],[225,255,22],[228,255,19],[232,255,15],[235,255,12],[238,255,9],[241,252,6],[244,248,2],[248,245,0],[251,241,0],[254,237,0],[255,234,0],[255,230,0],[255,226,0],[255,222,0],[255,219,0],[255,215,0],[255,211,0],[255,208,0],[255,204,0],[255,200,0],[255,197,0],[255,193,0],[255,189,0],[255,185,0],[255,182,0],[255,178,0],[255,174,0],[255,171,0],[255,167,0],[255,163,0],[255,159,0],[255,156,0],[255,152,0],[255,148,0],[255,145,0],[255,141,0],[255,137,0],[255,134,0],[255,130,0],[255,126,0],[255,122,0],[255,119,0],[255,115,0],[255,111,0],[255,107,0],[255,104,0],[255,100,0],[255,96,0],[255,93,0],[255,89,0],[255,85,0],[255,82,0],[255,78,0],[255,74,0],[255,71,0],[255,67,0],[255,63,0],[255,59,0],[255,56,0],[255,52,0],[255,48,0],[255,45,0],[255,41,0],[255,37,0],[255,33,0],[255,30,0],[255,26,0],[255,22,0],[254,18,0],[250,15,0],[245,11,0],[241,8,0],[237,4,0],[232,0,0],[227,0,0],[223,0,0],[219,0,0],[214,0,0],[209,0,0],[204,0,0],[200,0,0],[195,0,0],[191,0,0],[187,0,0],[182,0,0],[177,0,0],[173,0,0],[168,0,0],[164,0,0],[159,0,0],[155,0,0],[149,0,0],[145,0,0],[141,0,0],[136,0,0],[132,0,0],[128,0,0]];
              	var o = 255 - n[r][a],
              	rgb = jet[n[r][a]];
              	t.spectrCc.fillStyle = "rgb("+rgb[0]+","+rgb[1]+","+rgb[2]+")", t.spectrCc.fillRect(r, i - a * s, 1, s)
            	}
        	}
      	}, {
        	key: "getFrequencies",
        	value: function(e) {
          	var t = this.fftSamples,
            	r = this.buffer = this.wavesurfer.backend.buffer,
            	a = r.getChannelData(0),
            	i = r.length,
            	s = r.sampleRate,
            	o = [];
          	if (r) {
            	var l = this.noverlap;
            	if (!l) {
              	var h = r.length / this.canvas.width;
              	l = Math.max(0, Math.round(t - h))
            	}
            	for (var f = new n(t, s, this.windowFunc, this.alpha), u = (Math.floor(i / (t - l)), 0); u + t < a.length;) {
              	var c = a.slice(u, u + t),
                	p = f.calculateSpectrum(c),
                	d = new Uint8Array(t / 2),
                	v = void 0;
              	for (v = 0; v < t / 2; v++) d[v] = Math.max(-255, 45 * Math.log10(p[v]));
              	o.push(d), u += t - l
            	}
            	e(o, this)
          	} else this.fireEvent("error", "Web Audio buffer is not available")
        	}
      	}, {
        	key: "loadFrequenciesData",
        	value: function(e) {
          	var t = this,
            	r = this.util.ajax({
              	url: e
            	});
          	return r.on("success", function(e) {
            	return t.drawSpectrogram(JSON.parse(e), t)
          	}), r.on("error", function(e) {
            	return t.fireEvent("error", "XHR error: " + e.target.statusText)
          	}), r
        	}
      	}, {
        	key: "freqType",
        	value: function(e) {
          	return e >= 1e3 ? (e / 1e3).toFixed(1) : Math.round(e)
        	}
      	}, {
        	key: "unitType",
        	value: function(e) {
          	return e >= 1e3 ? "KHz" : "Hz"
        	}
      	}, {
        	key: "loadLabels",
        	value: function(e, t, r, a, i, n, s, o) {
          	e = e || "rgba(68,68,68,0)", t = t || "12px", r = r || "10px", a = a || "Helvetica", i = i || "#fff", n = n || "#fff", s = s || "center", o = o || "#specLabels";
          	var l, h = this.height || 512,
            	f = 24,
            	// f = h / 256 * 5, (commentaire) modifie la valeur des fr√©quences (labels)24
            	u = (this.wavesurfer.backend.ac.sampleRate / 2 - 0) / f,
            	c = this.labelsEl.getContext("2d");
          	for (this.labelsEl.height = this.height, this.labelsEl.width = 55, c.fillStyle = e, c.fillRect(0, 0, 55, h), c.fill(), l = 0; l <= f; l++) {
            	c.textAlign = s, c.textBaseline = "middle";
            	var p = 0 + u * l,
              	d = (Math.round(p / (this.sampleRate / 2) * this.fftSamples), this.freqType(p)),
              	v = this.unitType(p);
            	0 == l ? (c.fillStyle = n, c.font = r + " " + a, c.fillText(v, 40, h + l - 10), c.fillStyle = i, c.font = t + " " + a, c.fillText(d, 16, h + l - 10)) : (c.fillStyle = n, c.font = r + " " + a, c.fillText(v, 40, h - 50 * l + 2), c.fillStyle = i, c.font = t + " " + a, c.fillText(d, 16, h - 50 * l + 2))
          	}
        	}
      	}, {
        	key: "updateScroll",
        	value: function(e) {
          	this.wrapper && (this.wrapper.scrollLeft = e.target.scrollLeft)
        	}
      	}, {
        	key: "resample",
        	value: function(e) {
          	var t, r = this.width,
            	a = [],
            	i = 1 / e.length,
            	n = 1 / r;
          	for (t = 0; t < r; t++) {
            	var s = new Array(e[0].length),
              	o = void 0;
            	for (o = 0; o < e.length; o++) {
              	var l = o * i,
                	h = l + i,
                	f = t * n,
                	u = f + n,
                	c = h <= f || u <= l ? 0 : Math.min(Math.max(h, f), Math.max(u, l)) - Math.max(Math.min(h, f), Math.min(u, l)),
                	p = void 0;
              	if (c > 0)
                	for (p = 0; p < e[0].length; p++) null == s[p] && (s[p] = 0), s[p] += c / n * e[o][p]
            	}
            	var d = new Uint8Array(e[0].length),
              	v = void 0;
            	for (v = 0; v < e[0].length; v++) d[v] = s[v];
            	a.push(d)
          	}
          	return a
        	}
      	}]), e
    	}();
  	t.default = s, e.exports = t.default
	}
  })
});
